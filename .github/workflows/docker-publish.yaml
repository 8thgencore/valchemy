name: Docker Publish

on:
  push:
    branches: [main, master]
    tags: ['v*']
  pull_request:
    branches: [main, master]

env:
  REGISTRY: "docker.io"
  IMAGE_NAME: "microservice-auth"
  CONTAINER_NAME: "microservice-auth-container"

jobs:
  image-build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=,suffix=,format=short
            type=ref,event=tag
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: image-build-and-push
    if: github.event_name != 'pull_request'
    environment: production

    steps:
      - name: Deploy to Cloud
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_KEY_PASSPHRASE }}
          envs: IMAGE_NAME,REGISTRY,GITHUB_SHA,CONTAINER_NAME
          script: |
            TAG_NAME=$(echo $GITHUB_SHA | head -c7)
            
            echo "Logging into Docker Registry..."
            docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY
            
            echo "Stopping existing container..."
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true
            
            echo "Creating .env file..."
            echo "${{ secrets.ENV_FILE }}" > .env
            
            echo "Starting new container..."
            docker run -d \
              --restart unless-stopped \
              --name $CONTAINER_NAME \
              --env-file .env \
              -p 50051:50051 \
              $REGISTRY/${{ secrets.REGISTRY_USERNAME }}/$IMAGE_NAME:$TAG_NAME
            
            echo "Cleaning up old images..."
            docker image prune -f 